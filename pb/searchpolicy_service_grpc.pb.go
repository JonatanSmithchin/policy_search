// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: searchpolicy_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchPolicyService_SearchPolicy_FullMethodName = "/proto.SearchPolicyService/SearchPolicy"
)

// SearchPolicyServiceClient is the client API for SearchPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchPolicyServiceClient interface {
	SearchPolicy(ctx context.Context, in *SearchPolicyRequest, opts ...grpc.CallOption) (SearchPolicyService_SearchPolicyClient, error)
}

type searchPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchPolicyServiceClient(cc grpc.ClientConnInterface) SearchPolicyServiceClient {
	return &searchPolicyServiceClient{cc}
}

func (c *searchPolicyServiceClient) SearchPolicy(ctx context.Context, in *SearchPolicyRequest, opts ...grpc.CallOption) (SearchPolicyService_SearchPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchPolicyService_ServiceDesc.Streams[0], SearchPolicyService_SearchPolicy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &searchPolicyServiceSearchPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchPolicyService_SearchPolicyClient interface {
	Recv() (*SearchPolicyResponse, error)
	grpc.ClientStream
}

type searchPolicyServiceSearchPolicyClient struct {
	grpc.ClientStream
}

func (x *searchPolicyServiceSearchPolicyClient) Recv() (*SearchPolicyResponse, error) {
	m := new(SearchPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchPolicyServiceServer is the server API for SearchPolicyService service.
// All implementations must embed UnimplementedSearchPolicyServiceServer
// for forward compatibility
type SearchPolicyServiceServer interface {
	SearchPolicy(*SearchPolicyRequest, SearchPolicyService_SearchPolicyServer) error
	mustEmbedUnimplementedSearchPolicyServiceServer()
}

// UnimplementedSearchPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchPolicyServiceServer struct {
}

func (UnimplementedSearchPolicyServiceServer) SearchPolicy(*SearchPolicyRequest, SearchPolicyService_SearchPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPolicy not implemented")
}
func (UnimplementedSearchPolicyServiceServer) mustEmbedUnimplementedSearchPolicyServiceServer() {}

// UnsafeSearchPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchPolicyServiceServer will
// result in compilation errors.
type UnsafeSearchPolicyServiceServer interface {
	mustEmbedUnimplementedSearchPolicyServiceServer()
}

func RegisterSearchPolicyServiceServer(s grpc.ServiceRegistrar, srv SearchPolicyServiceServer) {
	s.RegisterService(&SearchPolicyService_ServiceDesc, srv)
}

func _SearchPolicyService_SearchPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchPolicyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchPolicyServiceServer).SearchPolicy(m, &searchPolicyServiceSearchPolicyServer{stream})
}

type SearchPolicyService_SearchPolicyServer interface {
	Send(*SearchPolicyResponse) error
	grpc.ServerStream
}

type searchPolicyServiceSearchPolicyServer struct {
	grpc.ServerStream
}

func (x *searchPolicyServiceSearchPolicyServer) Send(m *SearchPolicyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SearchPolicyService_ServiceDesc is the grpc.ServiceDesc for SearchPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SearchPolicyService",
	HandlerType: (*SearchPolicyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchPolicy",
			Handler:       _SearchPolicyService_SearchPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "searchpolicy_service.proto",
}
